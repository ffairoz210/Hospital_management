# -*- coding: utf-8 -*-
"""student_info.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uRXA7Ba3MAp9K7hCHHb1r60rYhx4Wivu

##Hospital management
"""

class Patient:
    def __init__(self, name, age, condition):
        self.__name = name
        self.__age = age
        self.__condition = condition

    def get_name(self):
        return self.__name

    def get_age(self):
        return self.__age

    def get_condition(self):
        return self.__condition

    def set_condition(self, condition):
        self.__condition = condition

    def __str__(self):
        return f"Name: {self.__name}, Age: {self.__age}, Condition: {self.__condition}"


class Doctor:
    def __init__(self, name, specialization):
        self.__name = name
        self.__specialization = specialization

    def get_name(self):
        return self.__name

    def get_specialization(self):
        return self.__specialization

    def treat_patient(self, patient):
        print(f"{self.__name} is treating {patient.get_name()}")

    def __str__(self):
        return f"Name: {self.__name}, Specialization: {self.__specialization}"


class Nurse:
    def __init__(self, name, department):
        self.__name = name
        self.__department = department

    def get_name(self):
        return self.__name

    def get_department(self):
        return self.__department

    def __str__(self):
        return f"Name: {self.__name}, Department: {self.__department}"


class Appointment:
    def __init__(self, patient, doctor, time):
        self.patient = patient
        self.doctor = doctor
        self.time = time

    def __str__(self):
        return f"Patient: {self.patient.get_name()}, Doctor: {self.doctor.get_name()}, Time: {self.time}"


class Department:
    def __init__(self, name, location):
        self.__name = name
        self.__location = location

    def get_name(self):
        return self.__name

    def get_location(self):
        return self.__location

    def __str__(self):
        return f"Department: {self.__name}, Location: {self.__location}"


class Surgeon(Doctor):
    def __init__(self, name, specialization, experience):
        super().__init__(name, specialization)
        self.__experience = experience

    def get_experience(self):
        return self.__experience

    def __str__(self):
        return f"Name: {self.get_name()}, Specialization: {self.get_specialization()}, Experience: {self.__experience}"


class HospitalManagementSystem:
    def __init__(self):
        self.patients = []
        self.doctors = []
        self.nurses = []
        self.appointments = []
        self.departments = []

    def add_patient(self, name, age, condition):
        self.patients.append(Patient(name, age, condition))

    def add_doctor(self, name, specialization):
        self.doctors.append(Doctor(name, specialization))

    def add_nurse(self, name, department):
        self.nurses.append(Nurse(name, department))

    def schedule_appointment(self, patient_index, doctor_index, time):
        appointment = Appointment(self.patients[patient_index], self.doctors[doctor_index], time)
        self.appointments.append(appointment)

    def add_department(self, name, location):
        self.departments.append(Department(name, location))

    def run(self):
        while True:
            print("\nHospital Management System")
            print("1. Add Patient")
            print("2. Add Doctor")
            print("3. Add Nurse")
            print("4. Schedule Appointment")
            print("5. List Departments")
            print("6. List Appointments")
            print("7. Exit")

            choice = input("\nEnter your choice (1-7): ")

            if choice == "1":
                name = input("Enter patient name: ")
                age = int(input("Enter patient age: "))
                condition = input("Enter patient condition: ")
                self.add_patient(name, age, condition)
                print(f"{name} has been added as a patient.")

            elif choice == "2":
                name = input("Enter doctor name: ")
                specialization = input("Enter doctor specialization: ")
                self.add_doctor(name, specialization)
                print(f"{name} has been added as a doctor.")

            elif choice == "3":
                name = input("Enter nurse name: ")
                department = input("Enter nurse department: ")
                self.add_nurse(name, department)
                print(f"{name} has been added as a nurse.")

            elif choice == "4":
                patient_index = int(input("Enter patient index: "))
                doctor_index = int(input("Enter doctor index: "))
                time = input("Enter appointment time: ")
                self.schedule_appointment(patient_index, doctor_index, time)
                print("Appointment scheduled successfully.")

            elif choice == "5":
                print("\nList of Departments:")
                for department in self.departments:
                    print(department)

            elif choice == "6":
                print("\nList of Appointments:")
                for appointment in self.appointments:
                    print(appointment)

            elif choice == "7":
                print("Exiting...")
                break

            else:
                print("Invalid choice.")


# Create an instance of the HospitalManagementSystem
hospital_system = HospitalManagementSystem()

# Add initial data
hospital_system.add_patient("John", 35, "Fever")
hospital_system.add_patient("Alice", 25, "Broken leg")
hospital_system.add_doctor("Dr. Smith", "General Practitioner")
hospital_system.add_doctor("Dr. Johnson", "Surgeon")
hospital_system.add_nurse("Nurse 1", "Emergency")
hospital_system.add_nurse("Nurse 2", "ICU")
hospital_system.schedule_appointment(0, 0, "10:00 AM")
hospital_system.schedule_appointment(1, 1, "11:00 AM")
hospital_system.add_department("Cardiology", "2nd Floor")
hospital_system.add_department("Orthopedics", "3rd Floor")

# Run the hospital management system
hospital_system.run()

